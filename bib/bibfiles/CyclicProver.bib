@incollection{Brotherston2012,
	address = {Berlin, Heidelberg},
	title = {A {Generic} {Cyclic} {Theorem} {Prover}},
	volume = {7705},
	isbn = {978-3-642-35181-5 978-3-642-35182-2},
	url = {http://link.springer.com/10.1007/978-3-642-35182-2_25},
	abstract = {We describe the design and implementation of an automated theorem prover realising a fully general notion of cyclic proof. Our tool, called Cyclist, is able to construct proofs obeying a very general cycle scheme in which leaves may be linked to any other matching node in the proof, and to verify the general, global inﬁnitary condition on such proof objects ensuring their soundness. Cyclist is based on a new, generic theory of cyclic proofs that can be instantiated to a wide variety of logics. We have developed three such concrete instantiations, based on: (a) ﬁrst-order logic with inductive deﬁnitions; (b) entailments of pure separation logic; and (c) Hoare-style termination proofs for pointer programs. Experiments run on these instantiations indicate that Cyclist oﬀers signiﬁcant potential as a future platform for inductive theorem proving.},
	language = {en},
	urldate = {2019-05-09},
	booktitle = {Programming {Languages} and {Systems}},
	publisher = {Springer Berlin Heidelberg},
	author = {Brotherston, James and Gorogiannis, Nikos and Petersen, Rasmus L.},
	editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Jhala, Ranjit and Igarashi, Atsushi},
	year = {2012},
	doi = {10.1007/978-3-642-35182-2_25},
	pages = {350--367},
	file = {Brotherston et al. - 2012 - A Generic Cyclic Theorem Prover.pdf:files/1784/Brotherston et al. - 2012 - A Generic Cyclic Theorem Prover.pdf:application/pdf}
}

@article{Brotherston2008,
author = {Brotherston, James and Bornat, Richard and Calcagno, Cristiano},
title = {Cyclic Proofs of Program Termination in Separation Logic},
year = {2008},
issue_date = {January 2008},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {43},
number = {1},
issn = {0362-1340},
url = {https://doi.org/10.1145/1328897.1328453},
doi = {10.1145/1328897.1328453},
abstract = {We propose a novel approach to proving the termination of heap-manipulating programs, which combines separation logic with cyclic proof within a Hoare-style proof system.Judgements in this system express (guaranteed) termination of the program when started from a given line in the program and in a state satisfying a given precondition, which is expressed as a formula of separation logic. The proof rules of our system are of two types: logical rules that operate on preconditions; and symbolic execution rules that capture the effect of executing program commands.Our logical preconditions employ inductively defined predicates to describe heap properties, and proofs in our system are cyclic proofs: cyclic derivations in which some inductive predicate is unfolded infinitely often along every infinite path, thus allowing us to discard all infinite paths in the proof by an infinite descent argument. Moreover, the use of this soundness condition enables us to avoid the explicit construction and use of ranking functions for termination. We also give a completeness result for our system, which is relative in that it relies upon completeness of a proof system for logical implications in separation logic. We give examples illustrating our approach, including one example for which thecorresponding ranking function is non-obvious: termination of the classical algorithm for in-place reversal of a (possibly cyclic) linked list.},
journal = {SIGPLAN Not.},
month = jan,
pages = {101–112},
numpages = {12},
keywords = {program verification, cyclic proof, inductive definitions, separation logic, termination, hoare logic}
}

@inproceedings{Dunchev2015,
	address = {Berlin, Heidelberg},
	title = {Cut-{Elimination} and {Proof} {Schemata}},
	isbn = {978-3-662-46906-4},
	abstract = {By Gentzen's famous Hauptsatz (the cut-elimination theorem) every proof in sequent calculus for first-order logic with cuts can be transformed into a cut-free proof; cut-free proofs are analytic and consist entirely of syntactic material of the end-sequent (the proven theorem). But in systems with induction rules, cut-elimination is either impossible or does not produce proofs with the subformula property. One way to overcome this problem is to formulate induction proofs as infinite sequences of proofs in a uniform way and to develop a method, which yields a uniform description of the corresponding cut-free proofs. We present such a formalism, as an alternative to systems with induction rules, and define a corresponding cut-elimination method (based on the CERES-method for first-order logic). The basic tools of proof theory, such as sequent- and resolution calculi are enriched with inductive definitions and schemata of terms, formulas, proofs, etc. We define a class of inductive proofs which can be transformed into this formalism and subjected to schematic cut-elimination.},
	booktitle = {Logic, {Language}, and {Computation}},
	publisher = {Springer Berlin Heidelberg},
	author = {Dunchev, Cvetan and Leitsch, Alexander and Rukhaia, Mikheil and Weller, Daniel},
	editor = {Aher, Martin and Hole, Daniel and Je\v{r}\'{a}bek, Emil and Kupke, Clemens},
	year = {2015},
	pages = {117--136}
}

